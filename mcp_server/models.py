# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T13:45:37+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AcceptLanguage(RootModel[constr(max_length=100)]):
    root: constr(max_length=100)


class AcceptPortfolioShareOutput(BaseModel):
    pass


class AccessLevelFilterKey(Enum):
    Account = 'Account'
    Role = 'Role'
    User = 'User'


class AccessLevelFilterValue(RootModel[str]):
    root: str


class AccessStatus(Enum):
    ENABLED = 'ENABLED'
    UNDER_CHANGE = 'UNDER_CHANGE'
    DISABLED = 'DISABLED'


class AccountId(RootModel[constr(pattern=r'^[0-9]{12}$')]):
    root: constr(pattern=r'^[0-9]{12}$')


class AccountIds(RootModel[List[AccountId]]):
    root: List[AccountId]


class ApproximateCount(RootModel[int]):
    root: int


class AssociateBudgetWithResourceOutput(BaseModel):
    pass


class AssociatePrincipalWithPortfolioOutput(BaseModel):
    pass


class AssociateProductWithPortfolioOutput(BaseModel):
    pass


class AssociateServiceActionWithProvisioningArtifactOutput(BaseModel):
    pass


class AssociateTagOptionWithResourceOutput(BaseModel):
    pass


class AttributeValue(RootModel[str]):
    root: str


class Boolean(RootModel[bool]):
    root: bool


class BudgetName(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class CausingEntity(RootModel[str]):
    root: str


class ChangeAction(Enum):
    ADD = 'ADD'
    MODIFY = 'MODIFY'
    REMOVE = 'REMOVE'


class CloudWatchDashboardName(RootModel[str]):
    root: str


class CodeStarConnectionArn(
    RootModel[
        constr(
            pattern=r'arn:[a-z0-9][-.a-z0-9]{0,62}:codestar-connections:([a-z0-9][-.a-z0-9]{0,62})?:([a-z0-9][-.a-z0-9]{0,62})?:[^/].{0,1023}$',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z0-9][-.a-z0-9]{0,62}:codestar-connections:([a-z0-9][-.a-z0-9]{0,62})?:([a-z0-9][-.a-z0-9]{0,62})?:[^/].{0,1023}$',
        min_length=1,
        max_length=1224,
    )


class ConstraintDescription(RootModel[constr(max_length=2000)]):
    root: constr(max_length=2000)


class ConstraintParameters(RootModel[str]):
    root: str


class ConstraintType(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class CopyOption(Enum):
    CopyTags = 'CopyTags'


class CopyOptions(RootModel[List[CopyOption]]):
    root: List[CopyOption]


class CopyProductStatus(Enum):
    SUCCEEDED = 'SUCCEEDED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'


class CreatedTime(RootModel[datetime]):
    root: datetime


class CreationTime(RootModel[datetime]):
    root: datetime


class DefaultValue(RootModel[str]):
    root: str


class DeleteConstraintOutput(BaseModel):
    pass


class DeletePortfolioOutput(BaseModel):
    pass


class DeleteProductOutput(BaseModel):
    pass


class DeleteProvisionedProductPlanOutput(BaseModel):
    pass


class DeleteProvisioningArtifactOutput(BaseModel):
    pass


class DeleteServiceActionOutput(BaseModel):
    pass


class DeleteTagOptionOutput(BaseModel):
    pass


class DescribePortfolioShareType(Enum):
    ACCOUNT = 'ACCOUNT'
    ORGANIZATION = 'ORGANIZATION'
    ORGANIZATIONAL_UNIT = 'ORGANIZATIONAL_UNIT'
    ORGANIZATION_MEMBER_ACCOUNT = 'ORGANIZATION_MEMBER_ACCOUNT'


class Description(RootModel[str]):
    root: str


class DisableAWSOrganizationsAccessInput(BaseModel):
    pass


class DisableAWSOrganizationsAccessOutput(BaseModel):
    pass


class DisableTemplateValidation(RootModel[bool]):
    root: bool


class DisassociateBudgetFromResourceOutput(BaseModel):
    pass


class DisassociatePrincipalFromPortfolioOutput(BaseModel):
    pass


class DisassociateProductFromPortfolioOutput(BaseModel):
    pass


class DisassociateServiceActionFromProvisioningArtifactOutput(BaseModel):
    pass


class DisassociateTagOptionFromResourceOutput(BaseModel):
    pass


class DuplicateResourceException(RootModel[Any]):
    root: Any


class EnableAWSOrganizationsAccessInput(BaseModel):
    pass


class EnableAWSOrganizationsAccessOutput(BaseModel):
    pass


class EngineWorkflowFailureReason(
    RootModel[
        constr(
            pattern=r'[\u0009\u000a\u000d\u0020-\uD7FF\uE000-\uFFFD]*',
            min_length=1,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000a\u000d\u0020-\uD7FF\uE000-\uFFFD]*',
        min_length=1,
        max_length=2048,
    )


class EngineWorkflowStatus(Enum):
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class EngineWorkflowToken(
    RootModel[constr(pattern=r'[0-9A-Za-z+\/=]+', min_length=1, max_length=20000)]
):
    root: constr(pattern=r'[0-9A-Za-z+\/=]+', min_length=1, max_length=20000)


class Error(RootModel[str]):
    root: str


class ErrorCode(RootModel[str]):
    root: str


class ErrorDescription(RootModel[str]):
    root: str


class EvaluationType(Enum):
    STATIC = 'STATIC'
    DYNAMIC = 'DYNAMIC'


class ExecutionParameterKey(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class ExecutionParameterType(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ExecutionParameterValue(RootModel[constr(min_length=0, max_length=512)]):
    root: constr(min_length=0, max_length=512)


class ExecutionParameterValueList(RootModel[List[ExecutionParameterValue]]):
    root: List[ExecutionParameterValue] = Field(..., max_length=25, min_length=0)


class GetAWSOrganizationsAccessStatusInput(BaseModel):
    pass


class GetAWSOrganizationsAccessStatusOutput(BaseModel):
    AccessStatus_1: Optional[AccessStatus] = Field(None, alias='AccessStatus')


class HasDefaultPath(RootModel[bool]):
    root: bool


class Id(RootModel[constr(pattern=r'^[a-zA-Z0-9_\-]*', min_length=1, max_length=100)]):
    root: constr(pattern=r'^[a-zA-Z0-9_\-]*', min_length=1, max_length=100)


class IdempotencyToken(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9_-]*', min_length=1, max_length=128)


class IgnoreErrors(RootModel[bool]):
    root: bool


class InstructionType(RootModel[str]):
    root: str


class InstructionValue(RootModel[str]):
    root: str


class InvalidParametersException(RootModel[Any]):
    root: Any


class InvalidStateException(RootModel[Any]):
    root: Any


class LastRequestId(RootModel[str]):
    root: str


class LastSuccessfulSyncTime(RootModel[datetime]):
    root: datetime


class LastSyncStatus(Enum):
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class LastSyncStatusMessage(RootModel[str]):
    root: str


class LastSyncTime(RootModel[datetime]):
    root: datetime


class LimitExceededException(RootModel[Any]):
    root: Any


class ListProvisioningArtifactsInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ProductId: Id


class LogicalResourceId(RootModel[str]):
    root: str


class Message(RootModel[str]):
    root: str


class Namespaces(RootModel[List[AccountId]]):
    root: List[AccountId]


class NoEcho(RootModel[bool]):
    root: bool


class NotificationArn(
    RootModel[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=1,
        max_length=1224,
    )


class NotificationArns(RootModel[List[NotificationArn]]):
    root: List[NotificationArn] = Field(..., max_length=5)


class NotifyProvisionProductEngineWorkflowResultOutput(BaseModel):
    pass


class NotifyTerminateProvisionedProductEngineWorkflowResultInput(BaseModel):
    FailureReason: Optional[EngineWorkflowFailureReason] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    RecordId: Id
    Status: EngineWorkflowStatus
    WorkflowToken: EngineWorkflowToken


class NotifyTerminateProvisionedProductEngineWorkflowResultOutput(BaseModel):
    pass


class NotifyUpdateProvisionedProductEngineWorkflowResultOutput(BaseModel):
    pass


class NullableBoolean(RootModel[bool]):
    root: bool


class OperationNotSupportedException(RootModel[Any]):
    root: Any


class OrganizationNodeType(Enum):
    ORGANIZATION = 'ORGANIZATION'
    ORGANIZATIONAL_UNIT = 'ORGANIZATIONAL_UNIT'
    ACCOUNT = 'ACCOUNT'


class OrganizationNodeValue(
    RootModel[
        constr(
            pattern=r'(^[0-9]{12}$)|(^arn:aws:organizations::\d{12}:organization\/o-[a-z0-9]{10,32})|(^o-[a-z0-9]{10,32}$)|(^arn:aws:organizations::\d{12}:ou\/o-[a-z0-9]{10,32}\/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}$)|(^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$)'
        )
    ]
):
    root: constr(
        pattern=r'(^[0-9]{12}$)|(^arn:aws:organizations::\d{12}:organization\/o-[a-z0-9]{10,32})|(^o-[a-z0-9]{10,32}$)|(^arn:aws:organizations::\d{12}:ou\/o-[a-z0-9]{10,32}\/ou-[0-9a-z]{4,32}-[0-9a-z]{8,32}$)|(^ou-[0-9a-z]{4,32}-[a-z0-9]{8,32}$)'
    )


class OutputDescription(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class OutputKey(RootModel[str]):
    root: str


class OutputKeys(RootModel[List[OutputKey]]):
    root: List[OutputKey] = Field(..., max_length=60)


class OutputValue(RootModel[str]):
    root: str


class Owner(RootModel[str]):
    root: str


class PageSize(RootModel[conint(ge=0, le=20)]):
    root: conint(ge=0, le=20)


class PageSizeMax100(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class PageToken(
    RootModel[
        constr(
            pattern=r'[\u0009\u000a\u000d\u0020-\uD7FF\uE000-\uFFFD]*', max_length=2024
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000a\u000d\u0020-\uD7FF\uE000-\uFFFD]*', max_length=2024
    )


class ParameterKey(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class ParameterType(RootModel[str]):
    root: str


class ParameterValue(RootModel[constr(max_length=4096)]):
    root: constr(max_length=4096)


class PhysicalId(RootModel[str]):
    root: str


class PhysicalResourceId(RootModel[str]):
    root: str


class PlanResourceType(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class PortfolioDescription(RootModel[constr(max_length=2000)]):
    root: constr(max_length=2000)


class PortfolioDisplayName(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class PortfolioName(RootModel[str]):
    root: str


class PortfolioShareDetail(BaseModel):
    Accepted: Optional[Boolean] = None
    PrincipalId: Optional[Id] = None
    SharePrincipals: Optional[Boolean] = None
    ShareTagOptions: Optional[Boolean] = None
    Type: Optional[DescribePortfolioShareType] = None


class PortfolioShareDetails(RootModel[List[PortfolioShareDetail]]):
    root: List[PortfolioShareDetail]


class PortfolioShareType(Enum):
    IMPORTED = 'IMPORTED'
    AWS_SERVICECATALOG = 'AWS_SERVICECATALOG'
    AWS_ORGANIZATIONS = 'AWS_ORGANIZATIONS'


class PrincipalARN(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class PrincipalType(Enum):
    IAM = 'IAM'
    IAM_PATTERN = 'IAM_PATTERN'


class ProductArn(
    RootModel[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=1,
        max_length=1224,
    )


class ProductSource(Enum):
    ACCOUNT = 'ACCOUNT'


class ProductType(Enum):
    CLOUD_FORMATION_TEMPLATE = 'CLOUD_FORMATION_TEMPLATE'
    MARKETPLACE = 'MARKETPLACE'
    TERRAFORM_OPEN_SOURCE = 'TERRAFORM_OPEN_SOURCE'


class ProductViewAggregationType(RootModel[str]):
    root: str


class ProductViewAggregationValue(BaseModel):
    ApproximateCount_1: Optional[ApproximateCount] = Field(
        None, alias='ApproximateCount'
    )
    Value: Optional[AttributeValue] = None


class ProductViewAggregationValues(RootModel[List[ProductViewAggregationValue]]):
    root: List[ProductViewAggregationValue]


class ProductViewAggregations(
    RootModel[Optional[Dict[str, ProductViewAggregationValues]]]
):
    root: Optional[Dict[str, ProductViewAggregationValues]] = None


class ProductViewDistributor(RootModel[str]):
    root: str


class ProductViewFilterBy(Enum):
    FullTextSearch = 'FullTextSearch'
    Owner = 'Owner'
    ProductType = 'ProductType'
    SourceProductId = 'SourceProductId'


class ProductViewFilterValue(RootModel[str]):
    root: str


class ProductViewFilterValues(RootModel[List[ProductViewFilterValue]]):
    root: List[ProductViewFilterValue]


class ProductViewFilters(RootModel[Optional[Dict[str, ProductViewFilterValues]]]):
    root: Optional[Dict[str, ProductViewFilterValues]] = None


class ProductViewName(RootModel[constr(max_length=8191)]):
    root: constr(max_length=8191)


class ProductViewOwner(RootModel[constr(max_length=8191)]):
    root: constr(max_length=8191)


class ProductViewShortDescription(RootModel[constr(max_length=8191)]):
    root: constr(max_length=8191)


class ProductViewSortBy(Enum):
    Title = 'Title'
    VersionCount = 'VersionCount'
    CreationDate = 'CreationDate'


class PropertyKey(Enum):
    OWNER = 'OWNER'
    LAUNCH_ROLE = 'LAUNCH_ROLE'


class PropertyName(RootModel[str]):
    root: str


class PropertyValue(RootModel[constr(min_length=0, max_length=1024)]):
    root: constr(min_length=0, max_length=1024)


class ProviderName(RootModel[constr(min_length=1, max_length=50)]):
    root: constr(min_length=1, max_length=50)


class ProvisionedProductId(RootModel[str]):
    root: str


class ProvisionedProductName(
    RootModel[
        constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9._-]*', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'[a-zA-Z0-9][a-zA-Z0-9._-]*', min_length=1, max_length=128)


class ProvisionedProductNameOrArn(
    RootModel[
        constr(
            pattern=r'[a-zA-Z0-9][a-zA-Z0-9._-]{0,127}|arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'[a-zA-Z0-9][a-zA-Z0-9._-]{0,127}|arn:[a-z0-9-\.]{1,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[a-z0-9-\.]{0,63}:[^/].{0,1023}',
        min_length=1,
        max_length=1224,
    )


class ProvisionedProductPlanName(RootModel[str]):
    root: str


class ProvisionedProductPlanStatus(Enum):
    CREATE_IN_PROGRESS = 'CREATE_IN_PROGRESS'
    CREATE_SUCCESS = 'CREATE_SUCCESS'
    CREATE_FAILED = 'CREATE_FAILED'
    EXECUTE_IN_PROGRESS = 'EXECUTE_IN_PROGRESS'
    EXECUTE_SUCCESS = 'EXECUTE_SUCCESS'
    EXECUTE_FAILED = 'EXECUTE_FAILED'


class ProvisionedProductPlanType(Enum):
    CLOUDFORMATION = 'CLOUDFORMATION'


class ProvisionedProductProperties(RootModel[Optional[Dict[str, PropertyValue]]]):
    root: Optional[Dict[str, PropertyValue]] = None


class ProvisionedProductStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    UNDER_CHANGE = 'UNDER_CHANGE'
    TAINTED = 'TAINTED'
    ERROR = 'ERROR'
    PLAN_IN_PROGRESS = 'PLAN_IN_PROGRESS'


class ProvisionedProductStatusMessage(RootModel[str]):
    root: str


class ProvisionedProductType(RootModel[str]):
    root: str


class ProvisionedProductViewFilterBy(Enum):
    SearchQuery = 'SearchQuery'


class ProvisionedProductViewFilterValue(RootModel[str]):
    root: str


class ProvisionedProductViewFilterValues(
    RootModel[List[ProvisionedProductViewFilterValue]]
):
    root: List[ProvisionedProductViewFilterValue]


class ProvisioningArtifactActive(RootModel[bool]):
    root: bool


class ProvisioningArtifactCreatedTime(RootModel[datetime]):
    root: datetime


class ProvisioningArtifactDescription(RootModel[constr(max_length=8192)]):
    root: constr(max_length=8192)


class ProvisioningArtifactGuidance(Enum):
    DEFAULT = 'DEFAULT'
    DEPRECATED = 'DEPRECATED'


class ProvisioningArtifactInfoKey(RootModel[str]):
    root: str


class ProvisioningArtifactInfoValue(RootModel[str]):
    root: str


class ProvisioningArtifactName(RootModel[constr(max_length=8192)]):
    root: constr(max_length=8192)


class ProvisioningArtifactOutputKey(
    RootModel[constr(pattern=r'[a-zA-Z0-9]*', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9]*', min_length=1, max_length=255)


class ProvisioningArtifactPropertyName(Enum):
    Id = 'Id'


class ProvisioningArtifactPropertyValue(RootModel[str]):
    root: str


class ProvisioningArtifactType(Enum):
    CLOUD_FORMATION_TEMPLATE = 'CLOUD_FORMATION_TEMPLATE'
    MARKETPLACE_AMI = 'MARKETPLACE_AMI'
    MARKETPLACE_CAR = 'MARKETPLACE_CAR'
    TERRAFORM_OPEN_SOURCE = 'TERRAFORM_OPEN_SOURCE'


class ProvisioningParameter(BaseModel):
    Key: Optional[ParameterKey] = None
    Value: Optional[ParameterValue] = None


class ProvisioningParameters(RootModel[List[ProvisioningParameter]]):
    root: List[ProvisioningParameter]


class RecordError(BaseModel):
    Code: Optional[ErrorCode] = None
    Description: Optional[ErrorDescription] = None


class RecordErrors(RootModel[List[RecordError]]):
    root: List[RecordError]


class RecordOutput(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    OutputKey_1: Optional[OutputKey] = Field(None, alias='OutputKey')
    OutputValue_1: Optional[OutputValue] = Field(None, alias='OutputValue')


class RecordOutputs(RootModel[List[RecordOutput]]):
    root: List[RecordOutput]


class RecordStatus(Enum):
    CREATED = 'CREATED'
    IN_PROGRESS = 'IN_PROGRESS'
    IN_PROGRESS_IN_ERROR = 'IN_PROGRESS_IN_ERROR'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class RecordTagKey(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=128
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=128
    )


class RecordTagValue(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
    )


class RecordType(RootModel[str]):
    root: str


class Region(RootModel[str]):
    root: str


class RejectPortfolioShareInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PortfolioId: Id
    PortfolioShareType_1: Optional[PortfolioShareType] = Field(
        None, alias='PortfolioShareType'
    )


class RejectPortfolioShareOutput(BaseModel):
    pass


class Replacement(Enum):
    TRUE = 'TRUE'
    FALSE = 'FALSE'
    CONDITIONAL = 'CONDITIONAL'


class Repository(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class RepositoryArtifactPath(RootModel[constr(min_length=1, max_length=4096)]):
    root: constr(min_length=1, max_length=4096)


class RepositoryBranch(RootModel[constr(min_length=1, max_length=250)]):
    root: constr(min_length=1, max_length=250)


class RequiresRecreation(Enum):
    NEVER = 'NEVER'
    CONDITIONALLY = 'CONDITIONALLY'
    ALWAYS = 'ALWAYS'


class ResourceARN(RootModel[constr(min_length=1, max_length=150)]):
    root: constr(min_length=1, max_length=150)


class ResourceAttribute(Enum):
    PROPERTIES = 'PROPERTIES'
    METADATA = 'METADATA'
    CREATIONPOLICY = 'CREATIONPOLICY'
    UPDATEPOLICY = 'UPDATEPOLICY'
    DELETIONPOLICY = 'DELETIONPOLICY'
    TAGS = 'TAGS'


class ResourceDetailARN(RootModel[str]):
    root: str


class ResourceDetailCreatedTime(RootModel[datetime]):
    root: datetime


class ResourceDetailDescription(RootModel[str]):
    root: str


class ResourceDetailId(RootModel[str]):
    root: str


class ResourceDetailName(RootModel[str]):
    root: str


class ResourceId(RootModel[str]):
    root: str


class ResourceInUseException(RootModel[Any]):
    root: Any


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class ResourceTargetDefinition(BaseModel):
    Attribute: Optional[ResourceAttribute] = None
    Name: Optional[PropertyName] = None
    RequiresRecreation_1: Optional[RequiresRecreation] = Field(
        None, alias='RequiresRecreation'
    )


class ResourceType(RootModel[str]):
    root: str


class RetainPhysicalResources(RootModel[bool]):
    root: bool


class RoleArn(
    RootModel[
        constr(
            pattern=r'arn:[a-z0-9-\.]{1,63}:iam::[a-z0-9-\.]{0,63}:role\/.{0,1023}',
            min_length=1,
            max_length=1224,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z0-9-\.]{1,63}:iam::[a-z0-9-\.]{0,63}:role\/.{0,1023}',
        min_length=1,
        max_length=1224,
    )


class Scope(RootModel[List[ResourceAttribute]]):
    root: List[ResourceAttribute]


class SearchFilterKey(RootModel[str]):
    root: str


class SearchFilterValue(RootModel[str]):
    root: str


class SearchProvisionedProductsPageSize(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class ServiceActionAssociation(BaseModel):
    ProductId: Id
    ProvisioningArtifactId: Id
    ServiceActionId: Id


class ServiceActionAssociationErrorCode(Enum):
    DUPLICATE_RESOURCE = 'DUPLICATE_RESOURCE'
    INTERNAL_FAILURE = 'INTERNAL_FAILURE'
    LIMIT_EXCEEDED = 'LIMIT_EXCEEDED'
    RESOURCE_NOT_FOUND = 'RESOURCE_NOT_FOUND'
    THROTTLING = 'THROTTLING'
    INVALID_PARAMETER = 'INVALID_PARAMETER'


class ServiceActionAssociationErrorMessage(
    RootModel[constr(min_length=1, max_length=1024)]
):
    root: constr(min_length=1, max_length=1024)


class ServiceActionAssociations(RootModel[List[ServiceActionAssociation]]):
    root: List[ServiceActionAssociation] = Field(..., max_length=50, min_length=1)


class ServiceActionDefinitionKey(Enum):
    Name = 'Name'
    Version = 'Version'
    AssumeRole = 'AssumeRole'
    Parameters = 'Parameters'


class ServiceActionDefinitionType(Enum):
    SSM_AUTOMATION = 'SSM_AUTOMATION'


class ServiceActionDefinitionValue(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class ServiceActionDescription(RootModel[constr(max_length=1024)]):
    root: constr(max_length=1024)


class ServiceActionName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\-.]*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\-.]*', min_length=1, max_length=256)


class ServiceActionSummary(BaseModel):
    DefinitionType: Optional[ServiceActionDefinitionType] = None
    Description: Optional[ServiceActionDescription] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[ServiceActionName] = None


class ShareError(BaseModel):
    Accounts: Optional[Namespaces] = None
    Error_1: Optional[Error] = Field(None, alias='Error')
    Message_1: Optional[Message] = Field(None, alias='Message')


class ShareErrors(RootModel[List[ShareError]]):
    root: List[ShareError]


class ShareStatus(Enum):
    NOT_STARTED = 'NOT_STARTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    COMPLETED_WITH_ERRORS = 'COMPLETED_WITH_ERRORS'
    ERROR = 'ERROR'


class SortField(RootModel[str]):
    root: str


class SortOrder(Enum):
    ASCENDING = 'ASCENDING'
    DESCENDING = 'DESCENDING'


class SourceProvisioningArtifactPropertiesMap(
    RootModel[Optional[Dict[str, ProvisioningArtifactPropertyValue]]]
):
    root: Optional[Dict[str, ProvisioningArtifactPropertyValue]] = None


class SourceRevision(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class SourceType(Enum):
    CODESTAR = 'CODESTAR'


class StackInstanceStatus(Enum):
    CURRENT = 'CURRENT'
    OUTDATED = 'OUTDATED'
    INOPERABLE = 'INOPERABLE'


class StackSetAccounts(RootModel[List[AccountId]]):
    root: List[AccountId]


class StackSetFailureToleranceCount(RootModel[conint(ge=0)]):
    root: conint(ge=0)


class StackSetFailureTolerancePercentage(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class StackSetMaxConcurrencyCount(RootModel[conint(ge=1)]):
    root: conint(ge=1)


class StackSetMaxConcurrencyPercentage(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class StackSetOperationType(Enum):
    CREATE = 'CREATE'
    UPDATE = 'UPDATE'
    DELETE = 'DELETE'


class StackSetRegions(RootModel[List[Region]]):
    root: List[Region]


class Status(Enum):
    AVAILABLE = 'AVAILABLE'
    CREATING = 'CREATING'
    FAILED = 'FAILED'


class StatusDetail(RootModel[str]):
    root: str


class StatusMessage(
    RootModel[constr(pattern=r'[\u0009\u000a\u000d\u0020-\uD7FF\uE000-\uFFFD]*')]
):
    root: constr(pattern=r'[\u0009\u000a\u000d\u0020-\uD7FF\uE000-\uFFFD]*')


class String(RootModel[str]):
    root: str


class SuccessfulShares(RootModel[List[AccountId]]):
    root: List[AccountId]


class SupportDescription(RootModel[constr(max_length=8191)]):
    root: constr(max_length=8191)


class SupportEmail(RootModel[constr(max_length=254)]):
    root: constr(max_length=254)


class SupportUrl(RootModel[constr(max_length=2083)]):
    root: constr(max_length=2083)


class TagKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey]


class TagOptionActive(RootModel[bool]):
    root: bool


class TagOptionId(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class TagOptionKey(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=128
    )


class TagOptionNotMigratedException(RootModel[Any]):
    root: Any


class TagOptionValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=256
    )


class TagOptionValues(RootModel[List[TagOptionValue]]):
    root: List[TagOptionValue]


class TagValue(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=256)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-@]*)$', min_length=1, max_length=256
    )


class TerminateProvisionedProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    IgnoreErrors_1: Optional[IgnoreErrors] = Field(None, alias='IgnoreErrors')
    ProvisionedProductId: Optional[Id] = None
    ProvisionedProductName: Optional[ProvisionedProductNameOrArn] = None
    RetainPhysicalResources_1: Optional[RetainPhysicalResources] = Field(
        None, alias='RetainPhysicalResources'
    )
    TerminateToken: IdempotencyToken


class TotalResultsCount(RootModel[int]):
    root: int


class UniqueTagKey(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:\/=+\-@]*)$', min_length=1, max_length=128
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:\/=+\-@]*)$', min_length=1, max_length=128
    )


class UniqueTagValue(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:\/=+\-@]*)$', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:\/=+\-@]*)$', min_length=1, max_length=256
    )


class UpdateConstraintInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Description: Optional[ConstraintDescription] = None
    Id_1: Id = Field(..., alias='Id')
    Parameters: Optional[ConstraintParameters] = None


class UpdatePortfolioShareOutput(BaseModel):
    PortfolioShareToken: Optional[Id] = None
    Status: Optional[ShareStatus] = None


class UpdateProvisionedProductPropertiesInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    ProvisionedProductId: Id
    ProvisionedProductProperties_1: ProvisionedProductProperties = Field(
        ..., alias='ProvisionedProductProperties'
    )


class UpdateProvisionedProductPropertiesOutput(BaseModel):
    ProvisionedProductId: Optional[Id] = None
    ProvisionedProductProperties_1: Optional[ProvisionedProductProperties] = Field(
        None, alias='ProvisionedProductProperties'
    )
    RecordId: Optional[Id] = None
    Status: Optional[RecordStatus] = None


class UpdateProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Active: Optional[ProvisioningArtifactActive] = None
    Description: Optional[ProvisioningArtifactDescription] = None
    Guidance: Optional[ProvisioningArtifactGuidance] = None
    Name: Optional[ProvisioningArtifactName] = None
    ProductId: Id
    ProvisioningArtifactId: Id


class UpdateProvisioningPreferences(BaseModel):
    StackSetAccounts_1: Optional[StackSetAccounts] = Field(
        None, alias='StackSetAccounts'
    )
    StackSetFailureToleranceCount_1: Optional[StackSetFailureToleranceCount] = Field(
        None, alias='StackSetFailureToleranceCount'
    )
    StackSetFailureTolerancePercentage_1: Optional[
        StackSetFailureTolerancePercentage
    ] = Field(None, alias='StackSetFailureTolerancePercentage')
    StackSetMaxConcurrencyCount_1: Optional[StackSetMaxConcurrencyCount] = Field(
        None, alias='StackSetMaxConcurrencyCount'
    )
    StackSetMaxConcurrencyPercentage_1: Optional[StackSetMaxConcurrencyPercentage] = (
        Field(None, alias='StackSetMaxConcurrencyPercentage')
    )
    StackSetOperationType_1: Optional[StackSetOperationType] = Field(
        None, alias='StackSetOperationType'
    )
    StackSetRegions_1: Optional[StackSetRegions] = Field(None, alias='StackSetRegions')


class UpdateTagOptionInput(BaseModel):
    Active: Optional[TagOptionActive] = None
    Id: TagOptionId
    Value: Optional[TagOptionValue] = None


class UpdatedTime(RootModel[datetime]):
    root: datetime


class UsageInstruction(BaseModel):
    Type: Optional[InstructionType] = None
    Value: Optional[InstructionValue] = None


class UsageInstructions(RootModel[List[UsageInstruction]]):
    root: List[UsageInstruction]


class UsePreviousValue(RootModel[bool]):
    root: bool


class UserArn(RootModel[str]):
    root: str


class UserArnSession(RootModel[str]):
    root: str


class Verbose(RootModel[bool]):
    root: bool


class XAmzTarget(Enum):
    AWS242ServiceCatalogService_AcceptPortfolioShare = (
        'AWS242ServiceCatalogService.AcceptPortfolioShare'
    )


class XAmzTarget1(Enum):
    AWS242ServiceCatalogService_AssociateBudgetWithResource = (
        'AWS242ServiceCatalogService.AssociateBudgetWithResource'
    )


class XAmzTarget2(Enum):
    AWS242ServiceCatalogService_AssociatePrincipalWithPortfolio = (
        'AWS242ServiceCatalogService.AssociatePrincipalWithPortfolio'
    )


class XAmzTarget3(Enum):
    AWS242ServiceCatalogService_AssociateProductWithPortfolio = (
        'AWS242ServiceCatalogService.AssociateProductWithPortfolio'
    )


class XAmzTarget4(Enum):
    AWS242ServiceCatalogService_AssociateServiceActionWithProvisioningArtifact = (
        'AWS242ServiceCatalogService.AssociateServiceActionWithProvisioningArtifact'
    )


class XAmzTarget5(Enum):
    AWS242ServiceCatalogService_AssociateTagOptionWithResource = (
        'AWS242ServiceCatalogService.AssociateTagOptionWithResource'
    )


class XAmzTarget6(Enum):
    AWS242ServiceCatalogService_BatchAssociateServiceActionWithProvisioningArtifact = 'AWS242ServiceCatalogService.BatchAssociateServiceActionWithProvisioningArtifact'


class XAmzTarget7(Enum):
    AWS242ServiceCatalogService_BatchDisassociateServiceActionFromProvisioningArtifact = 'AWS242ServiceCatalogService.BatchDisassociateServiceActionFromProvisioningArtifact'


class XAmzTarget8(Enum):
    AWS242ServiceCatalogService_CopyProduct = 'AWS242ServiceCatalogService.CopyProduct'


class XAmzTarget9(Enum):
    AWS242ServiceCatalogService_CreateConstraint = (
        'AWS242ServiceCatalogService.CreateConstraint'
    )


class XAmzTarget10(Enum):
    AWS242ServiceCatalogService_CreatePortfolio = (
        'AWS242ServiceCatalogService.CreatePortfolio'
    )


class XAmzTarget11(Enum):
    AWS242ServiceCatalogService_CreatePortfolioShare = (
        'AWS242ServiceCatalogService.CreatePortfolioShare'
    )


class XAmzTarget12(Enum):
    AWS242ServiceCatalogService_CreateProduct = (
        'AWS242ServiceCatalogService.CreateProduct'
    )


class XAmzTarget13(Enum):
    AWS242ServiceCatalogService_CreateProvisionedProductPlan = (
        'AWS242ServiceCatalogService.CreateProvisionedProductPlan'
    )


class XAmzTarget14(Enum):
    AWS242ServiceCatalogService_CreateProvisioningArtifact = (
        'AWS242ServiceCatalogService.CreateProvisioningArtifact'
    )


class XAmzTarget15(Enum):
    AWS242ServiceCatalogService_CreateServiceAction = (
        'AWS242ServiceCatalogService.CreateServiceAction'
    )


class XAmzTarget16(Enum):
    AWS242ServiceCatalogService_CreateTagOption = (
        'AWS242ServiceCatalogService.CreateTagOption'
    )


class XAmzTarget17(Enum):
    AWS242ServiceCatalogService_DeleteConstraint = (
        'AWS242ServiceCatalogService.DeleteConstraint'
    )


class XAmzTarget18(Enum):
    AWS242ServiceCatalogService_DeletePortfolio = (
        'AWS242ServiceCatalogService.DeletePortfolio'
    )


class XAmzTarget19(Enum):
    AWS242ServiceCatalogService_DeletePortfolioShare = (
        'AWS242ServiceCatalogService.DeletePortfolioShare'
    )


class XAmzTarget20(Enum):
    AWS242ServiceCatalogService_DeleteProduct = (
        'AWS242ServiceCatalogService.DeleteProduct'
    )


class XAmzTarget21(Enum):
    AWS242ServiceCatalogService_DeleteProvisionedProductPlan = (
        'AWS242ServiceCatalogService.DeleteProvisionedProductPlan'
    )


class XAmzTarget22(Enum):
    AWS242ServiceCatalogService_DeleteProvisioningArtifact = (
        'AWS242ServiceCatalogService.DeleteProvisioningArtifact'
    )


class XAmzTarget23(Enum):
    AWS242ServiceCatalogService_DeleteServiceAction = (
        'AWS242ServiceCatalogService.DeleteServiceAction'
    )


class XAmzTarget24(Enum):
    AWS242ServiceCatalogService_DeleteTagOption = (
        'AWS242ServiceCatalogService.DeleteTagOption'
    )


class XAmzTarget25(Enum):
    AWS242ServiceCatalogService_DescribeConstraint = (
        'AWS242ServiceCatalogService.DescribeConstraint'
    )


class XAmzTarget26(Enum):
    AWS242ServiceCatalogService_DescribeCopyProductStatus = (
        'AWS242ServiceCatalogService.DescribeCopyProductStatus'
    )


class XAmzTarget27(Enum):
    AWS242ServiceCatalogService_DescribePortfolio = (
        'AWS242ServiceCatalogService.DescribePortfolio'
    )


class XAmzTarget28(Enum):
    AWS242ServiceCatalogService_DescribePortfolioShareStatus = (
        'AWS242ServiceCatalogService.DescribePortfolioShareStatus'
    )


class XAmzTarget29(Enum):
    AWS242ServiceCatalogService_DescribePortfolioShares = (
        'AWS242ServiceCatalogService.DescribePortfolioShares'
    )


class XAmzTarget30(Enum):
    AWS242ServiceCatalogService_DescribeProduct = (
        'AWS242ServiceCatalogService.DescribeProduct'
    )


class XAmzTarget31(Enum):
    AWS242ServiceCatalogService_DescribeProductAsAdmin = (
        'AWS242ServiceCatalogService.DescribeProductAsAdmin'
    )


class XAmzTarget32(Enum):
    AWS242ServiceCatalogService_DescribeProductView = (
        'AWS242ServiceCatalogService.DescribeProductView'
    )


class XAmzTarget33(Enum):
    AWS242ServiceCatalogService_DescribeProvisionedProduct = (
        'AWS242ServiceCatalogService.DescribeProvisionedProduct'
    )


class XAmzTarget34(Enum):
    AWS242ServiceCatalogService_DescribeProvisionedProductPlan = (
        'AWS242ServiceCatalogService.DescribeProvisionedProductPlan'
    )


class XAmzTarget35(Enum):
    AWS242ServiceCatalogService_DescribeProvisioningArtifact = (
        'AWS242ServiceCatalogService.DescribeProvisioningArtifact'
    )


class XAmzTarget36(Enum):
    AWS242ServiceCatalogService_DescribeProvisioningParameters = (
        'AWS242ServiceCatalogService.DescribeProvisioningParameters'
    )


class XAmzTarget37(Enum):
    AWS242ServiceCatalogService_DescribeRecord = (
        'AWS242ServiceCatalogService.DescribeRecord'
    )


class XAmzTarget38(Enum):
    AWS242ServiceCatalogService_DescribeServiceAction = (
        'AWS242ServiceCatalogService.DescribeServiceAction'
    )


class XAmzTarget39(Enum):
    AWS242ServiceCatalogService_DescribeServiceActionExecutionParameters = (
        'AWS242ServiceCatalogService.DescribeServiceActionExecutionParameters'
    )


class XAmzTarget40(Enum):
    AWS242ServiceCatalogService_DescribeTagOption = (
        'AWS242ServiceCatalogService.DescribeTagOption'
    )


class XAmzTarget41(Enum):
    AWS242ServiceCatalogService_DisableAWSOrganizationsAccess = (
        'AWS242ServiceCatalogService.DisableAWSOrganizationsAccess'
    )


class XAmzTarget42(Enum):
    AWS242ServiceCatalogService_DisassociateBudgetFromResource = (
        'AWS242ServiceCatalogService.DisassociateBudgetFromResource'
    )


class XAmzTarget43(Enum):
    AWS242ServiceCatalogService_DisassociatePrincipalFromPortfolio = (
        'AWS242ServiceCatalogService.DisassociatePrincipalFromPortfolio'
    )


class XAmzTarget44(Enum):
    AWS242ServiceCatalogService_DisassociateProductFromPortfolio = (
        'AWS242ServiceCatalogService.DisassociateProductFromPortfolio'
    )


class XAmzTarget45(Enum):
    AWS242ServiceCatalogService_DisassociateServiceActionFromProvisioningArtifact = (
        'AWS242ServiceCatalogService.DisassociateServiceActionFromProvisioningArtifact'
    )


class XAmzTarget46(Enum):
    AWS242ServiceCatalogService_DisassociateTagOptionFromResource = (
        'AWS242ServiceCatalogService.DisassociateTagOptionFromResource'
    )


class XAmzTarget47(Enum):
    AWS242ServiceCatalogService_EnableAWSOrganizationsAccess = (
        'AWS242ServiceCatalogService.EnableAWSOrganizationsAccess'
    )


class XAmzTarget48(Enum):
    AWS242ServiceCatalogService_ExecuteProvisionedProductPlan = (
        'AWS242ServiceCatalogService.ExecuteProvisionedProductPlan'
    )


class XAmzTarget49(Enum):
    AWS242ServiceCatalogService_ExecuteProvisionedProductServiceAction = (
        'AWS242ServiceCatalogService.ExecuteProvisionedProductServiceAction'
    )


class XAmzTarget50(Enum):
    AWS242ServiceCatalogService_GetAWSOrganizationsAccessStatus = (
        'AWS242ServiceCatalogService.GetAWSOrganizationsAccessStatus'
    )


class XAmzTarget51(Enum):
    AWS242ServiceCatalogService_GetProvisionedProductOutputs = (
        'AWS242ServiceCatalogService.GetProvisionedProductOutputs'
    )


class XAmzTarget52(Enum):
    AWS242ServiceCatalogService_ImportAsProvisionedProduct = (
        'AWS242ServiceCatalogService.ImportAsProvisionedProduct'
    )


class XAmzTarget53(Enum):
    AWS242ServiceCatalogService_ListAcceptedPortfolioShares = (
        'AWS242ServiceCatalogService.ListAcceptedPortfolioShares'
    )


class XAmzTarget54(Enum):
    AWS242ServiceCatalogService_ListBudgetsForResource = (
        'AWS242ServiceCatalogService.ListBudgetsForResource'
    )


class XAmzTarget55(Enum):
    AWS242ServiceCatalogService_ListConstraintsForPortfolio = (
        'AWS242ServiceCatalogService.ListConstraintsForPortfolio'
    )


class XAmzTarget56(Enum):
    AWS242ServiceCatalogService_ListLaunchPaths = (
        'AWS242ServiceCatalogService.ListLaunchPaths'
    )


class XAmzTarget57(Enum):
    AWS242ServiceCatalogService_ListOrganizationPortfolioAccess = (
        'AWS242ServiceCatalogService.ListOrganizationPortfolioAccess'
    )


class XAmzTarget58(Enum):
    AWS242ServiceCatalogService_ListPortfolioAccess = (
        'AWS242ServiceCatalogService.ListPortfolioAccess'
    )


class XAmzTarget59(Enum):
    AWS242ServiceCatalogService_ListPortfolios = (
        'AWS242ServiceCatalogService.ListPortfolios'
    )


class XAmzTarget60(Enum):
    AWS242ServiceCatalogService_ListPortfoliosForProduct = (
        'AWS242ServiceCatalogService.ListPortfoliosForProduct'
    )


class XAmzTarget61(Enum):
    AWS242ServiceCatalogService_ListPrincipalsForPortfolio = (
        'AWS242ServiceCatalogService.ListPrincipalsForPortfolio'
    )


class XAmzTarget62(Enum):
    AWS242ServiceCatalogService_ListProvisionedProductPlans = (
        'AWS242ServiceCatalogService.ListProvisionedProductPlans'
    )


class XAmzTarget63(Enum):
    AWS242ServiceCatalogService_ListProvisioningArtifacts = (
        'AWS242ServiceCatalogService.ListProvisioningArtifacts'
    )


class XAmzTarget64(Enum):
    AWS242ServiceCatalogService_ListProvisioningArtifactsForServiceAction = (
        'AWS242ServiceCatalogService.ListProvisioningArtifactsForServiceAction'
    )


class XAmzTarget65(Enum):
    AWS242ServiceCatalogService_ListRecordHistory = (
        'AWS242ServiceCatalogService.ListRecordHistory'
    )


class XAmzTarget66(Enum):
    AWS242ServiceCatalogService_ListResourcesForTagOption = (
        'AWS242ServiceCatalogService.ListResourcesForTagOption'
    )


class XAmzTarget67(Enum):
    AWS242ServiceCatalogService_ListServiceActions = (
        'AWS242ServiceCatalogService.ListServiceActions'
    )


class XAmzTarget68(Enum):
    AWS242ServiceCatalogService_ListServiceActionsForProvisioningArtifact = (
        'AWS242ServiceCatalogService.ListServiceActionsForProvisioningArtifact'
    )


class XAmzTarget69(Enum):
    AWS242ServiceCatalogService_ListStackInstancesForProvisionedProduct = (
        'AWS242ServiceCatalogService.ListStackInstancesForProvisionedProduct'
    )


class XAmzTarget70(Enum):
    AWS242ServiceCatalogService_ListTagOptions = (
        'AWS242ServiceCatalogService.ListTagOptions'
    )


class XAmzTarget71(Enum):
    AWS242ServiceCatalogService_NotifyProvisionProductEngineWorkflowResult = (
        'AWS242ServiceCatalogService.NotifyProvisionProductEngineWorkflowResult'
    )


class XAmzTarget72(Enum):
    AWS242ServiceCatalogService_NotifyTerminateProvisionedProductEngineWorkflowResult = 'AWS242ServiceCatalogService.NotifyTerminateProvisionedProductEngineWorkflowResult'


class XAmzTarget73(Enum):
    AWS242ServiceCatalogService_NotifyUpdateProvisionedProductEngineWorkflowResult = (
        'AWS242ServiceCatalogService.NotifyUpdateProvisionedProductEngineWorkflowResult'
    )


class XAmzTarget74(Enum):
    AWS242ServiceCatalogService_ProvisionProduct = (
        'AWS242ServiceCatalogService.ProvisionProduct'
    )


class XAmzTarget75(Enum):
    AWS242ServiceCatalogService_RejectPortfolioShare = (
        'AWS242ServiceCatalogService.RejectPortfolioShare'
    )


class XAmzTarget76(Enum):
    AWS242ServiceCatalogService_ScanProvisionedProducts = (
        'AWS242ServiceCatalogService.ScanProvisionedProducts'
    )


class XAmzTarget77(Enum):
    AWS242ServiceCatalogService_SearchProducts = (
        'AWS242ServiceCatalogService.SearchProducts'
    )


class XAmzTarget78(Enum):
    AWS242ServiceCatalogService_SearchProductsAsAdmin = (
        'AWS242ServiceCatalogService.SearchProductsAsAdmin'
    )


class XAmzTarget79(Enum):
    AWS242ServiceCatalogService_SearchProvisionedProducts = (
        'AWS242ServiceCatalogService.SearchProvisionedProducts'
    )


class XAmzTarget80(Enum):
    AWS242ServiceCatalogService_TerminateProvisionedProduct = (
        'AWS242ServiceCatalogService.TerminateProvisionedProduct'
    )


class XAmzTarget81(Enum):
    AWS242ServiceCatalogService_UpdateConstraint = (
        'AWS242ServiceCatalogService.UpdateConstraint'
    )


class XAmzTarget82(Enum):
    AWS242ServiceCatalogService_UpdatePortfolio = (
        'AWS242ServiceCatalogService.UpdatePortfolio'
    )


class XAmzTarget83(Enum):
    AWS242ServiceCatalogService_UpdatePortfolioShare = (
        'AWS242ServiceCatalogService.UpdatePortfolioShare'
    )


class XAmzTarget84(Enum):
    AWS242ServiceCatalogService_UpdateProduct = (
        'AWS242ServiceCatalogService.UpdateProduct'
    )


class XAmzTarget85(Enum):
    AWS242ServiceCatalogService_UpdateProvisionedProduct = (
        'AWS242ServiceCatalogService.UpdateProvisionedProduct'
    )


class XAmzTarget86(Enum):
    AWS242ServiceCatalogService_UpdateProvisionedProductProperties = (
        'AWS242ServiceCatalogService.UpdateProvisionedProductProperties'
    )


class XAmzTarget87(Enum):
    AWS242ServiceCatalogService_UpdateProvisioningArtifact = (
        'AWS242ServiceCatalogService.UpdateProvisioningArtifact'
    )


class XAmzTarget88(Enum):
    AWS242ServiceCatalogService_UpdateServiceAction = (
        'AWS242ServiceCatalogService.UpdateServiceAction'
    )


class XAmzTarget89(Enum):
    AWS242ServiceCatalogService_UpdateTagOption = (
        'AWS242ServiceCatalogService.UpdateTagOption'
    )


class AcceptPortfolioShareInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PortfolioId: Id
    PortfolioShareType_1: Optional[PortfolioShareType] = Field(
        None, alias='PortfolioShareType'
    )


class AccessLevelFilter(BaseModel):
    Key: Optional[AccessLevelFilterKey] = None
    Value: Optional[AccessLevelFilterValue] = None


class AllowedValues(RootModel[List[String]]):
    root: List[String]


class AssociateBudgetWithResourceInput(BaseModel):
    BudgetName_1: BudgetName = Field(..., alias='BudgetName')
    ResourceId: Id


class AssociatePrincipalWithPortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PortfolioId: Id
    PrincipalARN_1: PrincipalARN = Field(..., alias='PrincipalARN')
    PrincipalType_1: PrincipalType = Field(..., alias='PrincipalType')


class AssociateProductWithPortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PortfolioId: Id
    ProductId: Id
    SourcePortfolioId: Optional[Id] = None


class AssociateServiceActionWithProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ProductId: Id
    ProvisioningArtifactId: Id
    ServiceActionId: Id


class AssociateTagOptionWithResourceInput(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    TagOptionId_1: TagOptionId = Field(..., alias='TagOptionId')


class BatchAssociateServiceActionWithProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ServiceActionAssociations_1: ServiceActionAssociations = Field(
        ..., alias='ServiceActionAssociations'
    )


class BatchDisassociateServiceActionFromProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ServiceActionAssociations_1: ServiceActionAssociations = Field(
        ..., alias='ServiceActionAssociations'
    )


class BudgetDetail(BaseModel):
    BudgetName_1: Optional[BudgetName] = Field(None, alias='BudgetName')


class Budgets(RootModel[List[BudgetDetail]]):
    root: List[BudgetDetail]


class CloudWatchDashboard(BaseModel):
    Name: Optional[CloudWatchDashboardName] = None


class CloudWatchDashboards(RootModel[List[CloudWatchDashboard]]):
    root: List[CloudWatchDashboard]


class CodeStarParameters(BaseModel):
    ArtifactPath: RepositoryArtifactPath
    Branch: RepositoryBranch
    ConnectionArn: CodeStarConnectionArn
    Repository_1: Repository = Field(..., alias='Repository')


class ConstraintDetail(BaseModel):
    ConstraintId: Optional[Id] = None
    Description: Optional[ConstraintDescription] = None
    Owner: Optional[AccountId] = None
    PortfolioId: Optional[Id] = None
    ProductId: Optional[Id] = None
    Type: Optional[ConstraintType] = None


class ConstraintDetails(RootModel[List[ConstraintDetail]]):
    root: List[ConstraintDetail]


class ConstraintSummary(BaseModel):
    Description: Optional[ConstraintDescription] = None
    Type: Optional[ConstraintType] = None


class CopyProductOutput(BaseModel):
    CopyProductToken: Optional[Id] = None


class CreateConstraintInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Description: Optional[ConstraintDescription] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    Parameters: ConstraintParameters
    PortfolioId: Id
    ProductId: Id
    Type: ConstraintType


class CreateConstraintOutput(BaseModel):
    ConstraintDetail_1: Optional[ConstraintDetail] = Field(
        None, alias='ConstraintDetail'
    )
    ConstraintParameters_1: Optional[ConstraintParameters] = Field(
        None, alias='ConstraintParameters'
    )
    Status_1: Optional[Status] = Field(None, alias='Status')


class CreatePortfolioShareOutput(BaseModel):
    PortfolioShareToken: Optional[Id] = None


class CreateProvisionedProductPlanOutput(BaseModel):
    PlanId: Optional[Id] = None
    PlanName: Optional[ProvisionedProductPlanName] = None
    ProvisionProductId: Optional[Id] = None
    ProvisionedProductName_1: Optional[ProvisionedProductName] = Field(
        None, alias='ProvisionedProductName'
    )
    ProvisioningArtifactId: Optional[Id] = None


class CreateTagOptionInput(BaseModel):
    Key: TagOptionKey
    Value: TagOptionValue


class DeleteConstraintInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')


class DeletePortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')


class DeletePortfolioShareOutput(BaseModel):
    PortfolioShareToken: Optional[Id] = None


class DeleteProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')


class DeleteProvisionedProductPlanInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    IgnoreErrors_1: Optional[IgnoreErrors] = Field(None, alias='IgnoreErrors')
    PlanId: Id


class DeleteProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ProductId: Id
    ProvisioningArtifactId: Id


class DeleteServiceActionInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')


class DeleteTagOptionInput(BaseModel):
    Id: TagOptionId


class DescribeConstraintInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')


class DescribeConstraintOutput(BaseModel):
    ConstraintDetail_1: Optional[ConstraintDetail] = Field(
        None, alias='ConstraintDetail'
    )
    ConstraintParameters_1: Optional[ConstraintParameters] = Field(
        None, alias='ConstraintParameters'
    )
    Status_1: Optional[Status] = Field(None, alias='Status')


class DescribeCopyProductStatusInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    CopyProductToken: Id


class DescribeCopyProductStatusOutput(BaseModel):
    CopyProductStatus_1: Optional[CopyProductStatus] = Field(
        None, alias='CopyProductStatus'
    )
    StatusDetail_1: Optional[StatusDetail] = Field(None, alias='StatusDetail')
    TargetProductId: Optional[Id] = None


class DescribePortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')


class DescribePortfolioShareStatusInput(BaseModel):
    PortfolioShareToken: Id


class DescribePortfolioSharesInput(BaseModel):
    PageSize: Optional[PageSizeMax100] = None
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    PortfolioId: Id
    Type: DescribePortfolioShareType


class DescribePortfolioSharesOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    PortfolioShareDetails_1: Optional[PortfolioShareDetails] = Field(
        None, alias='PortfolioShareDetails'
    )


class DescribeProductAsAdminInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[ProductViewName] = None
    SourcePortfolioId: Optional[Id] = None


class DescribeProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[ProductViewName] = None


class DescribeProductViewInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')


class DescribeProvisionedProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[ProvisionedProductName] = None


class DescribeProvisionedProductPlanInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    PlanId: Id


class DescribeProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ProductId: Optional[Id] = None
    ProductName: Optional[ProductViewName] = None
    ProvisioningArtifactId: Optional[Id] = None
    ProvisioningArtifactName_1: Optional[ProvisioningArtifactName] = Field(
        None, alias='ProvisioningArtifactName'
    )
    Verbose_1: Optional[Verbose] = Field(None, alias='Verbose')


class DescribeProvisioningParametersInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PathId: Optional[Id] = None
    PathName: Optional[PortfolioDisplayName] = None
    ProductId: Optional[Id] = None
    ProductName: Optional[ProductViewName] = None
    ProvisioningArtifactId: Optional[Id] = None
    ProvisioningArtifactName_1: Optional[ProvisioningArtifactName] = Field(
        None, alias='ProvisioningArtifactName'
    )


class DescribeRecordInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')


class DescribeServiceActionExecutionParametersInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ProvisionedProductId: Id
    ServiceActionId: Id


class DescribeServiceActionInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Id_1: Id = Field(..., alias='Id')


class DescribeTagOptionInput(BaseModel):
    Id: TagOptionId


class DisassociateBudgetFromResourceInput(BaseModel):
    BudgetName_1: BudgetName = Field(..., alias='BudgetName')
    ResourceId: Id


class DisassociatePrincipalFromPortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PortfolioId: Id
    PrincipalARN_1: PrincipalARN = Field(..., alias='PrincipalARN')
    PrincipalType_1: Optional[PrincipalType] = Field(None, alias='PrincipalType')


class DisassociateProductFromPortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PortfolioId: Id
    ProductId: Id


class DisassociateServiceActionFromProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ProductId: Id
    ProvisioningArtifactId: Id
    ServiceActionId: Id


class DisassociateTagOptionFromResourceInput(BaseModel):
    ResourceId_1: ResourceId = Field(..., alias='ResourceId')
    TagOptionId_1: TagOptionId = Field(..., alias='TagOptionId')


class ExecuteProvisionedProductPlanInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    PlanId: Id


class ExecutionParameter(BaseModel):
    DefaultValues: Optional[ExecutionParameterValueList] = None
    Name: Optional[ExecutionParameterKey] = None
    Type: Optional[ExecutionParameterType] = None


class ExecutionParameterMap(
    RootModel[Optional[Dict[str, ExecutionParameterValueList]]]
):
    root: Optional[Dict[str, ExecutionParameterValueList]] = None


class ExecutionParameters(RootModel[List[ExecutionParameter]]):
    root: List[ExecutionParameter]


class FailedServiceActionAssociation(BaseModel):
    ErrorCode: Optional[ServiceActionAssociationErrorCode] = None
    ErrorMessage: Optional[ServiceActionAssociationErrorMessage] = None
    ProductId: Optional[Id] = None
    ProvisioningArtifactId: Optional[Id] = None
    ServiceActionId: Optional[Id] = None


class FailedServiceActionAssociations(RootModel[List[FailedServiceActionAssociation]]):
    root: List[FailedServiceActionAssociation] = Field(..., max_length=50)


class GetProvisionedProductOutputsInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    OutputKeys_1: Optional[OutputKeys] = Field(None, alias='OutputKeys')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ProvisionedProductId: Optional[Id] = None
    ProvisionedProductName_1: Optional[ProvisionedProductName] = Field(
        None, alias='ProvisionedProductName'
    )


class GetProvisionedProductOutputsOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    Outputs: Optional[RecordOutputs] = None


class ImportAsProvisionedProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    PhysicalId_1: PhysicalId = Field(..., alias='PhysicalId')
    ProductId: Id
    ProvisionedProductName_1: ProvisionedProductName = Field(
        ..., alias='ProvisionedProductName'
    )
    ProvisioningArtifactId: Id


class LastSync(BaseModel):
    LastSuccessfulSyncProvisioningArtifactId: Optional[Id] = None
    LastSuccessfulSyncTime_1: Optional[LastSuccessfulSyncTime] = Field(
        None, alias='LastSuccessfulSyncTime'
    )
    LastSyncStatus_1: Optional[LastSyncStatus] = Field(None, alias='LastSyncStatus')
    LastSyncStatusMessage_1: Optional[LastSyncStatusMessage] = Field(
        None, alias='LastSyncStatusMessage'
    )
    LastSyncTime_1: Optional[LastSyncTime] = Field(None, alias='LastSyncTime')


class LaunchPath(BaseModel):
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[PortfolioName] = None


class LaunchPaths(RootModel[List[LaunchPath]]):
    root: List[LaunchPath]


class ListAcceptedPortfolioSharesInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize: Optional[PageSizeMax100] = None
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    PortfolioShareType_1: Optional[PortfolioShareType] = Field(
        None, alias='PortfolioShareType'
    )


class ListBudgetsForResourceInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ResourceId: Id


class ListBudgetsForResourceOutput(BaseModel):
    Budgets_1: Optional[Budgets] = Field(None, alias='Budgets')
    NextPageToken: Optional[PageToken] = None


class ListConstraintsForPortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    PortfolioId: Id
    ProductId: Optional[Id] = None


class ListConstraintsForPortfolioOutput(BaseModel):
    ConstraintDetails_1: Optional[ConstraintDetails] = Field(
        None, alias='ConstraintDetails'
    )
    NextPageToken: Optional[PageToken] = None


class ListLaunchPathsInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ProductId: Id


class ListOrganizationPortfolioAccessInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    OrganizationNodeType_1: OrganizationNodeType = Field(
        ..., alias='OrganizationNodeType'
    )
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    PortfolioId: Id


class ListPortfolioAccessInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    OrganizationParentId: Optional[Id] = None
    PageSize: Optional[PageSizeMax100] = None
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    PortfolioId: Id


class ListPortfolioAccessOutput(BaseModel):
    AccountIds_1: Optional[AccountIds] = Field(None, alias='AccountIds')
    NextPageToken: Optional[PageToken] = None


class ListPortfoliosForProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize: Optional[PageSizeMax100] = None
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ProductId: Id


class ListPortfoliosInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize: Optional[PageSizeMax100] = None
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')


class ListPrincipalsForPortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    PortfolioId: Id


class ListProvisionedProductPlansInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AccessLevelFilter_1: Optional[AccessLevelFilter] = Field(
        None, alias='AccessLevelFilter'
    )
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ProvisionProductId: Optional[Id] = None


class ListProvisioningArtifactsForServiceActionInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ServiceActionId: Id


class ListRecordHistorySearchFilter(BaseModel):
    Key: Optional[SearchFilterKey] = None
    Value: Optional[SearchFilterValue] = None


class ListResourcesForTagOptionInput(BaseModel):
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ResourceType_1: Optional[ResourceType] = Field(None, alias='ResourceType')
    TagOptionId_1: TagOptionId = Field(..., alias='TagOptionId')


class ListServiceActionsForProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ProductId: Id
    ProvisioningArtifactId: Id


class ListServiceActionsInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')


class ListStackInstancesForProvisionedProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ProvisionedProductId: Id


class ListTagOptionsFilters(BaseModel):
    Active: Optional[TagOptionActive] = None
    Key: Optional[TagOptionKey] = None
    Value: Optional[TagOptionValue] = None


class ListTagOptionsInput(BaseModel):
    Filters: Optional[ListTagOptionsFilters] = None
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')


class NotifyUpdateProvisionedProductEngineWorkflowResultInput(BaseModel):
    FailureReason: Optional[EngineWorkflowFailureReason] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    Outputs: Optional[RecordOutputs] = None
    RecordId: Id
    Status: EngineWorkflowStatus
    WorkflowToken: EngineWorkflowToken


class OrganizationNode(BaseModel):
    Type: Optional[OrganizationNodeType] = None
    Value: Optional[OrganizationNodeValue] = None


class OrganizationNodes(RootModel[List[OrganizationNode]]):
    root: List[OrganizationNode]


class ParameterConstraints(BaseModel):
    AllowedPattern: Optional[String] = None
    AllowedValues_1: Optional[AllowedValues] = Field(None, alias='AllowedValues')
    ConstraintDescription: Optional[String] = None
    MaxLength: Optional[String] = None
    MaxValue: Optional[String] = None
    MinLength: Optional[String] = None
    MinValue: Optional[String] = None


class PortfolioDetail(BaseModel):
    ARN: Optional[ResourceARN] = None
    CreatedTime: Optional[CreationTime] = None
    Description: Optional[PortfolioDescription] = None
    DisplayName: Optional[PortfolioDisplayName] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    ProviderName_1: Optional[ProviderName] = Field(None, alias='ProviderName')


class PortfolioDetails(RootModel[List[PortfolioDetail]]):
    root: List[PortfolioDetail]


class Principal(BaseModel):
    PrincipalARN_1: Optional[PrincipalARN] = Field(None, alias='PrincipalARN')
    PrincipalType_1: Optional[PrincipalType] = Field(None, alias='PrincipalType')


class Principals(RootModel[List[Principal]]):
    root: List[Principal]


class ProductViewSummary(BaseModel):
    Distributor: Optional[ProductViewDistributor] = None
    HasDefaultPath_1: Optional[HasDefaultPath] = Field(None, alias='HasDefaultPath')
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[ProductViewName] = None
    Owner: Optional[ProductViewOwner] = None
    ProductId: Optional[Id] = None
    ShortDescription: Optional[ProductViewShortDescription] = None
    SupportDescription_1: Optional[SupportDescription] = Field(
        None, alias='SupportDescription'
    )
    SupportEmail_1: Optional[SupportEmail] = Field(None, alias='SupportEmail')
    SupportUrl_1: Optional[SupportUrl] = Field(None, alias='SupportUrl')
    Type: Optional[ProductType] = None


class ProvisionedProductDetail(BaseModel):
    Arn: Optional[ProvisionedProductNameOrArn] = None
    CreatedTime_1: Optional[CreatedTime] = Field(None, alias='CreatedTime')
    Id: Optional[ProvisionedProductId] = None
    IdempotencyToken_1: Optional[IdempotencyToken] = Field(
        None, alias='IdempotencyToken'
    )
    LastProvisioningRecordId: Optional[Id] = None
    LastRecordId: Optional[LastRequestId] = None
    LastSuccessfulProvisioningRecordId: Optional[Id] = None
    LaunchRoleArn: Optional[RoleArn] = None
    Name: Optional[ProvisionedProductNameOrArn] = None
    ProductId: Optional[Id] = None
    ProvisioningArtifactId: Optional[Id] = None
    Status: Optional[ProvisionedProductStatus] = None
    StatusMessage: Optional[ProvisionedProductStatusMessage] = None
    Type: Optional[ProvisionedProductType] = None


class ProvisionedProductDetails(RootModel[List[ProvisionedProductDetail]]):
    root: List[ProvisionedProductDetail]


class ProvisionedProductFilters(
    RootModel[Optional[Dict[str, ProvisionedProductViewFilterValues]]]
):
    root: Optional[Dict[str, ProvisionedProductViewFilterValues]] = None


class ProvisionedProductPlanSummary(BaseModel):
    PlanId: Optional[Id] = None
    PlanName: Optional[ProvisionedProductPlanName] = None
    PlanType: Optional[ProvisionedProductPlanType] = None
    ProvisionProductId: Optional[Id] = None
    ProvisionProductName: Optional[ProvisionedProductName] = None
    ProvisioningArtifactId: Optional[Id] = None


class ProvisionedProductPlans(RootModel[List[ProvisionedProductPlanSummary]]):
    root: List[ProvisionedProductPlanSummary]


class ProvisioningArtifact(BaseModel):
    CreatedTime: Optional[ProvisioningArtifactCreatedTime] = None
    Description: Optional[ProvisioningArtifactDescription] = None
    Guidance: Optional[ProvisioningArtifactGuidance] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[ProvisioningArtifactName] = None


class ProvisioningArtifactDetail(BaseModel):
    Active: Optional[ProvisioningArtifactActive] = None
    CreatedTime: Optional[CreationTime] = None
    Description: Optional[ProvisioningArtifactName] = None
    Guidance: Optional[ProvisioningArtifactGuidance] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[ProvisioningArtifactName] = None
    SourceRevision_1: Optional[SourceRevision] = Field(None, alias='SourceRevision')
    Type: Optional[ProvisioningArtifactType] = None


class ProvisioningArtifactDetails(RootModel[List[ProvisioningArtifactDetail]]):
    root: List[ProvisioningArtifactDetail]


class ProvisioningArtifactInfo(
    RootModel[Optional[Dict[str, ProvisioningArtifactInfoValue]]]
):
    root: Optional[Dict[str, ProvisioningArtifactInfoValue]] = None


class ProvisioningArtifactOutput(BaseModel):
    Description: Optional[OutputDescription] = None
    Key: Optional[ProvisioningArtifactOutputKey] = None


class ProvisioningArtifactOutputs(RootModel[List[ProvisioningArtifactOutput]]):
    root: List[ProvisioningArtifactOutput] = Field(..., max_length=60)


class ProvisioningArtifactParameter(BaseModel):
    DefaultValue_1: Optional[DefaultValue] = Field(None, alias='DefaultValue')
    Description_1: Optional[Description] = Field(None, alias='Description')
    IsNoEcho: Optional[NoEcho] = None
    ParameterConstraints_1: Optional[ParameterConstraints] = Field(
        None, alias='ParameterConstraints'
    )
    ParameterKey_1: Optional[ParameterKey] = Field(None, alias='ParameterKey')
    ParameterType_1: Optional[ParameterType] = Field(None, alias='ParameterType')


class ProvisioningArtifactParameters(RootModel[List[ProvisioningArtifactParameter]]):
    root: List[ProvisioningArtifactParameter]


class ProvisioningArtifactPreferences(BaseModel):
    StackSetAccounts_1: Optional[StackSetAccounts] = Field(
        None, alias='StackSetAccounts'
    )
    StackSetRegions_1: Optional[StackSetRegions] = Field(None, alias='StackSetRegions')


class ProvisioningArtifactProperties(BaseModel):
    Description: Optional[ProvisioningArtifactDescription] = None
    DisableTemplateValidation_1: Optional[DisableTemplateValidation] = Field(
        None, alias='DisableTemplateValidation'
    )
    Info: Optional[ProvisioningArtifactInfo] = None
    Name: Optional[ProvisioningArtifactName] = None
    Type: Optional[ProvisioningArtifactType] = None


class ProvisioningArtifactSummary(BaseModel):
    CreatedTime: Optional[ProvisioningArtifactCreatedTime] = None
    Description: Optional[ProvisioningArtifactDescription] = None
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[ProvisioningArtifactName] = None
    ProvisioningArtifactMetadata: Optional[ProvisioningArtifactInfo] = None


class ProvisioningArtifactView(BaseModel):
    ProductViewSummary_1: Optional[ProductViewSummary] = Field(
        None, alias='ProductViewSummary'
    )
    ProvisioningArtifact_1: Optional[ProvisioningArtifact] = Field(
        None, alias='ProvisioningArtifact'
    )


class ProvisioningArtifactViews(RootModel[List[ProvisioningArtifactView]]):
    root: List[ProvisioningArtifactView]


class ProvisioningArtifacts(RootModel[List[ProvisioningArtifact]]):
    root: List[ProvisioningArtifact]


class ProvisioningPreferences(BaseModel):
    StackSetAccounts_1: Optional[StackSetAccounts] = Field(
        None, alias='StackSetAccounts'
    )
    StackSetFailureToleranceCount_1: Optional[StackSetFailureToleranceCount] = Field(
        None, alias='StackSetFailureToleranceCount'
    )
    StackSetFailureTolerancePercentage_1: Optional[
        StackSetFailureTolerancePercentage
    ] = Field(None, alias='StackSetFailureTolerancePercentage')
    StackSetMaxConcurrencyCount_1: Optional[StackSetMaxConcurrencyCount] = Field(
        None, alias='StackSetMaxConcurrencyCount'
    )
    StackSetMaxConcurrencyPercentage_1: Optional[StackSetMaxConcurrencyPercentage] = (
        Field(None, alias='StackSetMaxConcurrencyPercentage')
    )
    StackSetRegions_1: Optional[StackSetRegions] = Field(None, alias='StackSetRegions')


class RecordTag(BaseModel):
    Key: Optional[RecordTagKey] = None
    Value: Optional[RecordTagValue] = None


class RecordTags(RootModel[List[RecordTag]]):
    root: List[RecordTag] = Field(..., max_length=50)


class ResourceChangeDetail(BaseModel):
    CausingEntity_1: Optional[CausingEntity] = Field(None, alias='CausingEntity')
    Evaluation: Optional[EvaluationType] = None
    Target: Optional[ResourceTargetDefinition] = None


class ResourceChangeDetails(RootModel[List[ResourceChangeDetail]]):
    root: List[ResourceChangeDetail]


class ResourceDetail(BaseModel):
    ARN: Optional[ResourceDetailARN] = None
    CreatedTime: Optional[ResourceDetailCreatedTime] = None
    Description: Optional[ResourceDetailDescription] = None
    Id: Optional[ResourceDetailId] = None
    Name: Optional[ResourceDetailName] = None


class ResourceDetails(RootModel[List[ResourceDetail]]):
    root: List[ResourceDetail]


class ScanProvisionedProductsInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AccessLevelFilter_1: Optional[AccessLevelFilter] = Field(
        None, alias='AccessLevelFilter'
    )
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')


class ScanProvisionedProductsOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ProvisionedProducts: Optional[ProvisionedProductDetails] = None


class SearchProductsAsAdminInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Filters: Optional[ProductViewFilters] = None
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    PortfolioId: Optional[Id] = None
    ProductSource_1: Optional[ProductSource] = Field(None, alias='ProductSource')
    SortBy: Optional[ProductViewSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class SearchProductsInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Filters: Optional[ProductViewFilters] = None
    PageSize: Optional[PageSizeMax100] = None
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    SortBy: Optional[ProductViewSortBy] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class SearchProvisionedProductsInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AccessLevelFilter_1: Optional[AccessLevelFilter] = Field(
        None, alias='AccessLevelFilter'
    )
    Filters: Optional[ProvisionedProductFilters] = None
    PageSize: Optional[SearchProvisionedProductsPageSize] = None
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    SortBy: Optional[SortField] = None
    SortOrder_1: Optional[SortOrder] = Field(None, alias='SortOrder')


class ServiceActionDefinitionMap(
    RootModel[Optional[Dict[str, ServiceActionDefinitionValue]]]
):
    root: Optional[Dict[str, ServiceActionDefinitionValue]] = None


class ServiceActionDetail(BaseModel):
    Definition: Optional[ServiceActionDefinitionMap] = None
    ServiceActionSummary_1: Optional[ServiceActionSummary] = Field(
        None, alias='ServiceActionSummary'
    )


class ServiceActionSummaries(RootModel[List[ServiceActionSummary]]):
    root: List[ServiceActionSummary]


class ShareDetails(BaseModel):
    ShareErrors_1: Optional[ShareErrors] = Field(None, alias='ShareErrors')
    SuccessfulShares_1: Optional[SuccessfulShares] = Field(
        None, alias='SuccessfulShares'
    )


class SourceConnectionParameters(BaseModel):
    CodeStar: Optional[CodeStarParameters] = None


class SourceProvisioningArtifactProperties(
    RootModel[List[SourceProvisioningArtifactPropertiesMap]]
):
    root: List[SourceProvisioningArtifactPropertiesMap]


class StackInstance(BaseModel):
    Account: Optional[AccountId] = None
    Region_1: Optional[Region] = Field(None, alias='Region')
    StackInstanceStatus_1: Optional[StackInstanceStatus] = Field(
        None, alias='StackInstanceStatus'
    )


class StackInstances(RootModel[List[StackInstance]]):
    root: List[StackInstance]


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagOptionDetail(BaseModel):
    Active: Optional[TagOptionActive] = None
    Id: Optional[TagOptionId] = None
    Key: Optional[TagOptionKey] = None
    Owner_1: Optional[Owner] = Field(None, alias='Owner')
    Value: Optional[TagOptionValue] = None


class TagOptionDetails(RootModel[List[TagOptionDetail]]):
    root: List[TagOptionDetail]


class TagOptionSummary(BaseModel):
    Key: Optional[TagOptionKey] = None
    Values: Optional[TagOptionValues] = None


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50)


class UniqueTagResourceIdentifier(BaseModel):
    Key: Optional[UniqueTagKey] = None
    Value: Optional[UniqueTagValue] = None


class UpdateConstraintOutput(BaseModel):
    ConstraintDetail_1: Optional[ConstraintDetail] = Field(
        None, alias='ConstraintDetail'
    )
    ConstraintParameters_1: Optional[ConstraintParameters] = Field(
        None, alias='ConstraintParameters'
    )
    Status_1: Optional[Status] = Field(None, alias='Status')


class UpdatePortfolioOutput(BaseModel):
    PortfolioDetail_1: Optional[PortfolioDetail] = Field(None, alias='PortfolioDetail')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class UpdatePortfolioShareInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    OrganizationNode_1: Optional[OrganizationNode] = Field(
        None, alias='OrganizationNode'
    )
    PortfolioId: Id
    SharePrincipals: Optional[NullableBoolean] = None
    ShareTagOptions: Optional[NullableBoolean] = None


class UpdateProvisioningArtifactOutput(BaseModel):
    Info: Optional[ProvisioningArtifactInfo] = None
    ProvisioningArtifactDetail_1: Optional[ProvisioningArtifactDetail] = Field(
        None, alias='ProvisioningArtifactDetail'
    )
    Status_1: Optional[Status] = Field(None, alias='Status')


class UpdateProvisioningParameter(BaseModel):
    Key: Optional[ParameterKey] = None
    UsePreviousValue_1: Optional[UsePreviousValue] = Field(
        None, alias='UsePreviousValue'
    )
    Value: Optional[ParameterValue] = None


class UpdateProvisioningParameters(RootModel[List[UpdateProvisioningParameter]]):
    root: List[UpdateProvisioningParameter]


class UpdateServiceActionInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Definition: Optional[ServiceActionDefinitionMap] = None
    Description: Optional[ServiceActionDescription] = None
    Id_1: Id = Field(..., alias='Id')
    Name: Optional[ServiceActionName] = None


class UpdateServiceActionOutput(BaseModel):
    ServiceActionDetail_1: Optional[ServiceActionDetail] = Field(
        None, alias='ServiceActionDetail'
    )


class UpdateTagOptionOutput(BaseModel):
    TagOptionDetail_1: Optional[TagOptionDetail] = Field(None, alias='TagOptionDetail')


class AddTags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=20)


class BatchAssociateServiceActionWithProvisioningArtifactOutput(BaseModel):
    FailedServiceActionAssociations_1: Optional[FailedServiceActionAssociations] = (
        Field(None, alias='FailedServiceActionAssociations')
    )


class BatchDisassociateServiceActionFromProvisioningArtifactOutput(BaseModel):
    FailedServiceActionAssociations_1: Optional[FailedServiceActionAssociations] = (
        Field(None, alias='FailedServiceActionAssociations')
    )


class ConstraintSummaries(RootModel[List[ConstraintSummary]]):
    root: List[ConstraintSummary]


class CopyProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    CopyOptions_1: Optional[CopyOptions] = Field(None, alias='CopyOptions')
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    SourceProductArn: ProductArn
    SourceProvisioningArtifactIdentifiers: Optional[
        SourceProvisioningArtifactProperties
    ] = None
    TargetProductId: Optional[Id] = None
    TargetProductName: Optional[ProductViewName] = None


class CreatePortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Description: Optional[PortfolioDescription] = None
    DisplayName: PortfolioDisplayName
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    ProviderName_1: ProviderName = Field(..., alias='ProviderName')
    Tags: Optional[AddTags] = None


class CreatePortfolioOutput(BaseModel):
    PortfolioDetail_1: Optional[PortfolioDetail] = Field(None, alias='PortfolioDetail')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreatePortfolioShareInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    OrganizationNode_1: Optional[OrganizationNode] = Field(
        None, alias='OrganizationNode'
    )
    PortfolioId: Id
    SharePrincipals: Optional[Boolean] = None
    ShareTagOptions: Optional[Boolean] = None


class CreateProvisionedProductPlanInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    NotificationArns_1: Optional[NotificationArns] = Field(
        None, alias='NotificationArns'
    )
    PathId: Optional[Id] = None
    PlanName: ProvisionedProductPlanName
    PlanType: ProvisionedProductPlanType
    ProductId: Id
    ProvisionedProductName_1: ProvisionedProductName = Field(
        ..., alias='ProvisionedProductName'
    )
    ProvisioningArtifactId: Id
    ProvisioningParameters: Optional[UpdateProvisioningParameters] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateProvisioningArtifactInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    Parameters: ProvisioningArtifactProperties
    ProductId: Id


class CreateProvisioningArtifactOutput(BaseModel):
    Info: Optional[ProvisioningArtifactInfo] = None
    ProvisioningArtifactDetail_1: Optional[ProvisioningArtifactDetail] = Field(
        None, alias='ProvisioningArtifactDetail'
    )
    Status_1: Optional[Status] = Field(None, alias='Status')


class CreateServiceActionInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Definition: ServiceActionDefinitionMap
    DefinitionType: ServiceActionDefinitionType
    Description: Optional[ServiceActionDescription] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    Name: ServiceActionName


class CreateServiceActionOutput(BaseModel):
    ServiceActionDetail_1: Optional[ServiceActionDetail] = Field(
        None, alias='ServiceActionDetail'
    )


class CreateTagOptionOutput(BaseModel):
    TagOptionDetail_1: Optional[TagOptionDetail] = Field(None, alias='TagOptionDetail')


class DeletePortfolioShareInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    OrganizationNode_1: Optional[OrganizationNode] = Field(
        None, alias='OrganizationNode'
    )
    PortfolioId: Id


class DescribePortfolioOutput(BaseModel):
    Budgets_1: Optional[Budgets] = Field(None, alias='Budgets')
    PortfolioDetail_1: Optional[PortfolioDetail] = Field(None, alias='PortfolioDetail')
    TagOptions: Optional[TagOptionDetails] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DescribePortfolioShareStatusOutput(BaseModel):
    OrganizationNodeValue_1: Optional[OrganizationNodeValue] = Field(
        None, alias='OrganizationNodeValue'
    )
    PortfolioId: Optional[Id] = None
    PortfolioShareToken: Optional[Id] = None
    ShareDetails_1: Optional[ShareDetails] = Field(None, alias='ShareDetails')
    Status: Optional[ShareStatus] = None


class DescribeProductOutput(BaseModel):
    Budgets_1: Optional[Budgets] = Field(None, alias='Budgets')
    LaunchPaths_1: Optional[LaunchPaths] = Field(None, alias='LaunchPaths')
    ProductViewSummary_1: Optional[ProductViewSummary] = Field(
        None, alias='ProductViewSummary'
    )
    ProvisioningArtifacts_1: Optional[ProvisioningArtifacts] = Field(
        None, alias='ProvisioningArtifacts'
    )


class DescribeProductViewOutput(BaseModel):
    ProductViewSummary_1: Optional[ProductViewSummary] = Field(
        None, alias='ProductViewSummary'
    )
    ProvisioningArtifacts_1: Optional[ProvisioningArtifacts] = Field(
        None, alias='ProvisioningArtifacts'
    )


class DescribeProvisionedProductOutput(BaseModel):
    CloudWatchDashboards_1: Optional[CloudWatchDashboards] = Field(
        None, alias='CloudWatchDashboards'
    )
    ProvisionedProductDetail_1: Optional[ProvisionedProductDetail] = Field(
        None, alias='ProvisionedProductDetail'
    )


class DescribeProvisioningArtifactOutput(BaseModel):
    Info: Optional[ProvisioningArtifactInfo] = None
    ProvisioningArtifactDetail_1: Optional[ProvisioningArtifactDetail] = Field(
        None, alias='ProvisioningArtifactDetail'
    )
    Status_1: Optional[Status] = Field(None, alias='Status')


class DescribeServiceActionExecutionParametersOutput(BaseModel):
    ServiceActionParameters: Optional[ExecutionParameters] = None


class DescribeServiceActionOutput(BaseModel):
    ServiceActionDetail_1: Optional[ServiceActionDetail] = Field(
        None, alias='ServiceActionDetail'
    )


class DescribeTagOptionOutput(BaseModel):
    TagOptionDetail_1: Optional[TagOptionDetail] = Field(None, alias='TagOptionDetail')


class EngineWorkflowResourceIdentifier(BaseModel):
    UniqueTag: Optional[UniqueTagResourceIdentifier] = None


class ExecuteProvisionedProductServiceActionInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    ExecuteToken: IdempotencyToken
    Parameters: Optional[ExecutionParameterMap] = None
    ProvisionedProductId: Id
    ServiceActionId: Id


class LaunchPathSummary(BaseModel):
    ConstraintSummaries_1: Optional[ConstraintSummaries] = Field(
        None, alias='ConstraintSummaries'
    )
    Id_1: Optional[Id] = Field(None, alias='Id')
    Name: Optional[PortfolioName] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class ListAcceptedPortfolioSharesOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    PortfolioDetails_1: Optional[PortfolioDetails] = Field(
        None, alias='PortfolioDetails'
    )


class ListOrganizationPortfolioAccessOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    OrganizationNodes_1: Optional[OrganizationNodes] = Field(
        None, alias='OrganizationNodes'
    )


class ListPortfoliosForProductOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    PortfolioDetails_1: Optional[PortfolioDetails] = Field(
        None, alias='PortfolioDetails'
    )


class ListPortfoliosOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    PortfolioDetails_1: Optional[PortfolioDetails] = Field(
        None, alias='PortfolioDetails'
    )


class ListPrincipalsForPortfolioOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    Principals_1: Optional[Principals] = Field(None, alias='Principals')


class ListProvisionedProductPlansOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ProvisionedProductPlans_1: Optional[ProvisionedProductPlans] = Field(
        None, alias='ProvisionedProductPlans'
    )


class ListProvisioningArtifactsForServiceActionOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ProvisioningArtifactViews_1: Optional[ProvisioningArtifactViews] = Field(
        None, alias='ProvisioningArtifactViews'
    )


class ListProvisioningArtifactsOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ProvisioningArtifactDetails_1: Optional[ProvisioningArtifactDetails] = Field(
        None, alias='ProvisioningArtifactDetails'
    )


class ListRecordHistoryInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AccessLevelFilter_1: Optional[AccessLevelFilter] = Field(
        None, alias='AccessLevelFilter'
    )
    PageSize_1: Optional[PageSize] = Field(None, alias='PageSize')
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    SearchFilter: Optional[ListRecordHistorySearchFilter] = None


class ListResourcesForTagOptionOutput(BaseModel):
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    ResourceDetails_1: Optional[ResourceDetails] = Field(None, alias='ResourceDetails')


class ListServiceActionsForProvisioningArtifactOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ServiceActionSummaries_1: Optional[ServiceActionSummaries] = Field(
        None, alias='ServiceActionSummaries'
    )


class ListServiceActionsOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ServiceActionSummaries_1: Optional[ServiceActionSummaries] = Field(
        None, alias='ServiceActionSummaries'
    )


class ListStackInstancesForProvisionedProductOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    StackInstances_1: Optional[StackInstances] = Field(None, alias='StackInstances')


class ListTagOptionsOutput(BaseModel):
    PageToken_1: Optional[PageToken] = Field(None, alias='PageToken')
    TagOptionDetails_1: Optional[TagOptionDetails] = Field(
        None, alias='TagOptionDetails'
    )


class NotifyProvisionProductEngineWorkflowResultInput(BaseModel):
    FailureReason: Optional[EngineWorkflowFailureReason] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    Outputs: Optional[RecordOutputs] = None
    RecordId: Id
    ResourceIdentifier: Optional[EngineWorkflowResourceIdentifier] = None
    Status: EngineWorkflowStatus
    WorkflowToken: EngineWorkflowToken


class ProductViewSummaries(RootModel[List[ProductViewSummary]]):
    root: List[ProductViewSummary]


class ProvisionProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    NotificationArns_1: Optional[NotificationArns] = Field(
        None, alias='NotificationArns'
    )
    PathId: Optional[Id] = None
    PathName: Optional[PortfolioDisplayName] = None
    ProductId: Optional[Id] = None
    ProductName: Optional[ProductViewName] = None
    ProvisionToken: IdempotencyToken
    ProvisionedProductName_1: ProvisionedProductName = Field(
        ..., alias='ProvisionedProductName'
    )
    ProvisioningArtifactId: Optional[Id] = None
    ProvisioningArtifactName_1: Optional[ProvisioningArtifactName] = Field(
        None, alias='ProvisioningArtifactName'
    )
    ProvisioningParameters_1: Optional[ProvisioningParameters] = Field(
        None, alias='ProvisioningParameters'
    )
    ProvisioningPreferences_1: Optional[ProvisioningPreferences] = Field(
        None, alias='ProvisioningPreferences'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class ProvisionedProductAttribute(BaseModel):
    Arn: Optional[ProvisionedProductNameOrArn] = None
    CreatedTime_1: Optional[CreatedTime] = Field(None, alias='CreatedTime')
    Id_1: Optional[Id] = Field(None, alias='Id')
    IdempotencyToken_1: Optional[IdempotencyToken] = Field(
        None, alias='IdempotencyToken'
    )
    LastProvisioningRecordId: Optional[Id] = None
    LastRecordId: Optional[Id] = None
    LastSuccessfulProvisioningRecordId: Optional[Id] = None
    Name: Optional[ProvisionedProductNameOrArn] = None
    PhysicalId_1: Optional[PhysicalId] = Field(None, alias='PhysicalId')
    ProductId: Optional[Id] = None
    ProductName: Optional[ProductViewName] = None
    ProvisioningArtifactId: Optional[Id] = None
    ProvisioningArtifactName_1: Optional[ProvisioningArtifactName] = Field(
        None, alias='ProvisioningArtifactName'
    )
    Status: Optional[ProvisionedProductStatus] = None
    StatusMessage: Optional[ProvisionedProductStatusMessage] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    Type: Optional[ProvisionedProductType] = None
    UserArn_1: Optional[UserArn] = Field(None, alias='UserArn')
    UserArnSession_1: Optional[UserArnSession] = Field(None, alias='UserArnSession')


class ProvisionedProductAttributes(RootModel[List[ProvisionedProductAttribute]]):
    root: List[ProvisionedProductAttribute]


class ProvisionedProductPlanDetails(BaseModel):
    CreatedTime_1: Optional[CreatedTime] = Field(None, alias='CreatedTime')
    NotificationArns_1: Optional[NotificationArns] = Field(
        None, alias='NotificationArns'
    )
    PathId: Optional[Id] = None
    PlanId: Optional[Id] = None
    PlanName: Optional[ProvisionedProductPlanName] = None
    PlanType: Optional[ProvisionedProductPlanType] = None
    ProductId: Optional[Id] = None
    ProvisionProductId: Optional[Id] = None
    ProvisionProductName: Optional[ProvisionedProductName] = None
    ProvisioningArtifactId: Optional[Id] = None
    ProvisioningParameters: Optional[UpdateProvisioningParameters] = None
    Status: Optional[ProvisionedProductPlanStatus] = None
    StatusMessage_1: Optional[StatusMessage] = Field(None, alias='StatusMessage')
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UpdatedTime_1: Optional[UpdatedTime] = Field(None, alias='UpdatedTime')


class ProvisioningArtifactSummaries(RootModel[List[ProvisioningArtifactSummary]]):
    root: List[ProvisioningArtifactSummary]


class RecordDetail(BaseModel):
    CreatedTime_1: Optional[CreatedTime] = Field(None, alias='CreatedTime')
    LaunchRoleArn: Optional[RoleArn] = None
    PathId: Optional[Id] = None
    ProductId: Optional[Id] = None
    ProvisionedProductId: Optional[Id] = None
    ProvisionedProductName_1: Optional[ProvisionedProductName] = Field(
        None, alias='ProvisionedProductName'
    )
    ProvisionedProductType_1: Optional[ProvisionedProductType] = Field(
        None, alias='ProvisionedProductType'
    )
    ProvisioningArtifactId: Optional[Id] = None
    RecordErrors_1: Optional[RecordErrors] = Field(None, alias='RecordErrors')
    RecordId: Optional[Id] = None
    RecordTags_1: Optional[RecordTags] = Field(None, alias='RecordTags')
    RecordType_1: Optional[RecordType] = Field(None, alias='RecordType')
    Status: Optional[RecordStatus] = None
    UpdatedTime_1: Optional[UpdatedTime] = Field(None, alias='UpdatedTime')


class RecordDetails(RootModel[List[RecordDetail]]):
    root: List[RecordDetail]


class ResourceChange(BaseModel):
    Action: Optional[ChangeAction] = None
    Details: Optional[ResourceChangeDetails] = None
    LogicalResourceId_1: Optional[LogicalResourceId] = Field(
        None, alias='LogicalResourceId'
    )
    PhysicalResourceId_1: Optional[PhysicalResourceId] = Field(
        None, alias='PhysicalResourceId'
    )
    Replacement_1: Optional[Replacement] = Field(None, alias='Replacement')
    ResourceType: Optional[PlanResourceType] = None
    Scope_1: Optional[Scope] = Field(None, alias='Scope')


class ResourceChanges(RootModel[List[ResourceChange]]):
    root: List[ResourceChange]


class SearchProductsOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ProductViewAggregations_1: Optional[ProductViewAggregations] = Field(
        None, alias='ProductViewAggregations'
    )
    ProductViewSummaries_1: Optional[ProductViewSummaries] = Field(
        None, alias='ProductViewSummaries'
    )


class SearchProvisionedProductsOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ProvisionedProducts: Optional[ProvisionedProductAttributes] = None
    TotalResultsCount_1: Optional[TotalResultsCount] = Field(
        None, alias='TotalResultsCount'
    )


class SourceConnection(BaseModel):
    ConnectionParameters: SourceConnectionParameters
    Type: Optional[SourceType] = None


class SourceConnectionDetail(BaseModel):
    ConnectionParameters: Optional[SourceConnectionParameters] = None
    LastSync_1: Optional[LastSync] = Field(None, alias='LastSync')
    Type: Optional[SourceType] = None


class TagOptionSummaries(RootModel[List[TagOptionSummary]]):
    root: List[TagOptionSummary]


class TerminateProvisionedProductOutput(BaseModel):
    RecordDetail_1: Optional[RecordDetail] = Field(None, alias='RecordDetail')


class UpdatePortfolioInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AddTags_1: Optional[AddTags] = Field(None, alias='AddTags')
    Description: Optional[PortfolioDescription] = None
    DisplayName: Optional[PortfolioDisplayName] = None
    Id_1: Id = Field(..., alias='Id')
    ProviderName_1: Optional[ProviderName] = Field(None, alias='ProviderName')
    RemoveTags: Optional[TagKeys] = None


class UpdateProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    AddTags_1: Optional[AddTags] = Field(None, alias='AddTags')
    Description: Optional[ProductViewShortDescription] = None
    Distributor: Optional[ProductViewOwner] = None
    Id_1: Id = Field(..., alias='Id')
    Name: Optional[ProductViewName] = None
    Owner: Optional[ProductViewOwner] = None
    RemoveTags: Optional[TagKeys] = None
    SourceConnection_1: Optional[SourceConnection] = Field(
        None, alias='SourceConnection'
    )
    SupportDescription_1: Optional[SupportDescription] = Field(
        None, alias='SupportDescription'
    )
    SupportEmail_1: Optional[SupportEmail] = Field(None, alias='SupportEmail')
    SupportUrl_1: Optional[SupportUrl] = Field(None, alias='SupportUrl')


class UpdateProvisionedProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    PathId: Optional[Id] = None
    PathName: Optional[PortfolioDisplayName] = None
    ProductId: Optional[Id] = None
    ProductName: Optional[ProductViewName] = None
    ProvisionedProductId: Optional[Id] = None
    ProvisionedProductName: Optional[ProvisionedProductNameOrArn] = None
    ProvisioningArtifactId: Optional[Id] = None
    ProvisioningArtifactName_1: Optional[ProvisioningArtifactName] = Field(
        None, alias='ProvisioningArtifactName'
    )
    ProvisioningParameters: Optional[UpdateProvisioningParameters] = None
    ProvisioningPreferences: Optional[UpdateProvisioningPreferences] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
    UpdateToken: IdempotencyToken


class UpdateProvisionedProductOutput(BaseModel):
    RecordDetail_1: Optional[RecordDetail] = Field(None, alias='RecordDetail')


class CreateProductInput(BaseModel):
    AcceptLanguage_1: Optional[AcceptLanguage] = Field(None, alias='AcceptLanguage')
    Description: Optional[ProductViewShortDescription] = None
    Distributor: Optional[ProductViewOwner] = None
    IdempotencyToken_1: IdempotencyToken = Field(..., alias='IdempotencyToken')
    Name: ProductViewName
    Owner: ProductViewOwner
    ProductType_1: ProductType = Field(..., alias='ProductType')
    ProvisioningArtifactParameters: Optional[ProvisioningArtifactProperties] = None
    SourceConnection_1: Optional[SourceConnection] = Field(
        None, alias='SourceConnection'
    )
    SupportDescription_1: Optional[SupportDescription] = Field(
        None, alias='SupportDescription'
    )
    SupportEmail_1: Optional[SupportEmail] = Field(None, alias='SupportEmail')
    SupportUrl_1: Optional[SupportUrl] = Field(None, alias='SupportUrl')
    Tags: Optional[AddTags] = None


class DescribeProvisionedProductPlanOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ProvisionedProductPlanDetails_1: Optional[ProvisionedProductPlanDetails] = Field(
        None, alias='ProvisionedProductPlanDetails'
    )
    ResourceChanges_1: Optional[ResourceChanges] = Field(None, alias='ResourceChanges')


class DescribeProvisioningParametersOutput(BaseModel):
    ConstraintSummaries_1: Optional[ConstraintSummaries] = Field(
        None, alias='ConstraintSummaries'
    )
    ProvisioningArtifactOutputKeys: Optional[ProvisioningArtifactOutputs] = None
    ProvisioningArtifactOutputs_1: Optional[ProvisioningArtifactOutputs] = Field(
        None, alias='ProvisioningArtifactOutputs'
    )
    ProvisioningArtifactParameters_1: Optional[ProvisioningArtifactParameters] = Field(
        None, alias='ProvisioningArtifactParameters'
    )
    ProvisioningArtifactPreferences_1: Optional[ProvisioningArtifactPreferences] = (
        Field(None, alias='ProvisioningArtifactPreferences')
    )
    TagOptions: Optional[TagOptionSummaries] = None
    UsageInstructions_1: Optional[UsageInstructions] = Field(
        None, alias='UsageInstructions'
    )


class DescribeRecordOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    RecordDetail_1: Optional[RecordDetail] = Field(None, alias='RecordDetail')
    RecordOutputs_1: Optional[RecordOutputs] = Field(None, alias='RecordOutputs')


class ExecuteProvisionedProductPlanOutput(BaseModel):
    RecordDetail_1: Optional[RecordDetail] = Field(None, alias='RecordDetail')


class ExecuteProvisionedProductServiceActionOutput(BaseModel):
    RecordDetail_1: Optional[RecordDetail] = Field(None, alias='RecordDetail')


class ImportAsProvisionedProductOutput(BaseModel):
    RecordDetail_1: Optional[RecordDetail] = Field(None, alias='RecordDetail')


class LaunchPathSummaries(RootModel[List[LaunchPathSummary]]):
    root: List[LaunchPathSummary]


class ListLaunchPathsOutput(BaseModel):
    LaunchPathSummaries_1: Optional[LaunchPathSummaries] = Field(
        None, alias='LaunchPathSummaries'
    )
    NextPageToken: Optional[PageToken] = None


class ListRecordHistoryOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    RecordDetails_1: Optional[RecordDetails] = Field(None, alias='RecordDetails')


class ProductViewDetail(BaseModel):
    CreatedTime_1: Optional[CreatedTime] = Field(None, alias='CreatedTime')
    ProductARN: Optional[ResourceARN] = None
    ProductViewSummary_1: Optional[ProductViewSummary] = Field(
        None, alias='ProductViewSummary'
    )
    SourceConnection: Optional[SourceConnectionDetail] = None
    Status_1: Optional[Status] = Field(None, alias='Status')


class ProductViewDetails(RootModel[List[ProductViewDetail]]):
    root: List[ProductViewDetail]


class ProvisionProductOutput(BaseModel):
    RecordDetail_1: Optional[RecordDetail] = Field(None, alias='RecordDetail')


class SearchProductsAsAdminOutput(BaseModel):
    NextPageToken: Optional[PageToken] = None
    ProductViewDetails_1: Optional[ProductViewDetails] = Field(
        None, alias='ProductViewDetails'
    )


class UpdateProductOutput(BaseModel):
    ProductViewDetail_1: Optional[ProductViewDetail] = Field(
        None, alias='ProductViewDetail'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class CreateProductOutput(BaseModel):
    ProductViewDetail_1: Optional[ProductViewDetail] = Field(
        None, alias='ProductViewDetail'
    )
    ProvisioningArtifactDetail_1: Optional[ProvisioningArtifactDetail] = Field(
        None, alias='ProvisioningArtifactDetail'
    )
    Tags_1: Optional[Tags] = Field(None, alias='Tags')


class DescribeProductAsAdminOutput(BaseModel):
    Budgets_1: Optional[Budgets] = Field(None, alias='Budgets')
    ProductViewDetail_1: Optional[ProductViewDetail] = Field(
        None, alias='ProductViewDetail'
    )
    ProvisioningArtifactSummaries_1: Optional[ProvisioningArtifactSummaries] = Field(
        None, alias='ProvisioningArtifactSummaries'
    )
    TagOptions: Optional[TagOptionDetails] = None
    Tags_1: Optional[Tags] = Field(None, alias='Tags')
